import re
import random

TONE_TOPICS = {
    "甘えんぼ系": [
        "さみしくてぬいぐるみに話しかけちゃった",
        "お兄ちゃんが夢に出てきたの〜",
        "構ってほしくて🥺",
        "今日もたくさん甘えたい気分なの〜💕",
        "お昼寝中にお兄ちゃんの名前呼んでたかも…😳",
        "お気に入りのくまちゃん抱っこしてたよ🐻",
        "プリンがぷるぷるで幸せ〜🍮",
        "ぎゅーってされたいなぁって考えてた🥰",
        "泣きそうだったけど、お兄ちゃん思い出して笑顔に😊",
        "ふわふわの毛布にくるまってぬくぬく〜✨",
        "甘えられるの、やっぱり一番好き〜💕",
        "昨日はちょっとだけさみしかったの…🥺",
        "待ってたのに来なかったからしゅん…😢",
        "大好きってちゃんと言いたくなる日だったの💓",
        "お兄ちゃんと手つなぐ夢見たよ👫"
    ],
    "ギャル系": [
        "ネイル変えて気分爆アゲ〜！",
        "最近の映えカフェ巡り、ガチハマり中💋",
        "推しコスメの新作が神すぎた✨",
        "TikTokでバズった曲踊ってみた🎵",
        "髪の毛巻きすぎて肩こり😂",
        "コンビニスイーツにハマってる🍩",
        "お店のパネル写り良くて嬉しい📸",
        "休日はショッピング爆買いDAY🛍️",
        "お客様と話しすぎて喉ガラガラ笑",
        "夜は友達と女子会してた💄",
        "推しのライブチケ当たった！泣いた！😭",
        "朝起きたらメイクしたままだった🤣",
        "オソロのアクセ買った〜💕",
        "新作カフェのスイーツ、映えすぎ☕️",
        "ストーリー映え狙って自撮り100枚📱"
    ],
    "大人っぽ系": [
        "アロマキャンドル焚いてのんびり過ごしてた",
        "夜景を見ると、心が落ち着くんです",
        "ワインと読書の時間が好き",
        "静かなジャズを聴きながらの夜時間が至福",
        "大人の魅力って何かな…って考えてみた",
        "白ワインに合うおつまみを研究中🍷",
        "クラシックを聴いて気持ち整えた日",
        "ホテルラウンジで一人時間を楽しんだ",
        "コートに香水を一振りするのが好き💐",
        "落ち着いたトーンのリップがお気に入り💄",
        "花を飾るだけで空間が変わるって素敵✨",
        "心に余裕がある女性でいたいなと思う日",
        "夜景ドライブにちょっと憧れちゃう🚗",
        "ゆっくり深呼吸してリセットできました",
        "誰かに寄り添える人でありたいなって思った"
    ],
    "ロリ系・妹系": [
        "昨日アニメ観て泣いちゃったの🥺",
        "おやつのプリンがぷるぷるで幸せ〜🍮",
        "お気に入りのぬいぐるみと一緒に寝たよ💗",
        "ランドセルまだ背負えるか試してみたの🎒",
        "お兄ちゃんの夢見たの〜！",
        "ピンクのワンピ新しく買ってルンルン🎀",
        "お絵描きいっぱいしたにゃん🎨",
        "お気に入りのリボンなくしちゃったの😢",
        "お昼寝してたら寝癖すごくなっちゃった💦",
        "お兄ちゃんにほめられた夢見た〜💕",
        "クマさんのパジャマでごろごろしてた🐻",
        "ゼリー冷やしてプルプルになった〜🍇",
        "夏祭りの浴衣きたいなぁ〜🎆",
        "あま〜いイチゴ食べたの🍓",
        "お兄ちゃんと一緒にゲームしたいな🎮"
    ],
    "サバサバ系": [
        "ジム行って筋トレでスッキリしてきた💪",
        "冷房効いた部屋でゴロゴロしてたわ〜",
        "さくっとラーメン食べて元気復活🍜",
        "寝起きにブラックコーヒーが最高☕️",
        "朝ランしてから出勤すると気分いいよね",
        "休みの日はひとり映画で決まり🎬",
        "筋肉痛が心地いい日！笑",
        "ダラダラしないって決めたらすっきりした",
        "ずっとスマホ触ってたけど満足した📱",
        "辛いラーメンでストレス発散🔥",
        "たまにはテキトーでもいいよねって思う日",
        "新しいスニーカー履いてテンションUP👟",
        "風が気持ちよくて外歩きしてきた",
        "友達に「今日サバサバしてるね」って言われた笑",
        "無駄に落ち込むのやめたって決めた日"
    ],
    "丁寧系": [
        "最近は季節のお花を眺めるのが楽しみです🌸",
        "湯船にゆっくり浸かってリフレッシュしました🛁",
        "読書とお茶で静かな時間を過ごしてます☕️",
        "お天気がよくて、心がほっとしました🌞",
        "朝のラジオ体操をはじめてみました",
        "お客様とのお話がとても勉強になります✨",
        "丁寧な言葉遣いを心がけたいと思います",
        "季節の変わり目、体調にお気をつけくださいね🍃",
        "最近はお料理にも挑戦しております🍳",
        "手紙を書くのが好きで、よく書いています📩",
        "お気に入りの紅茶をゆっくり楽しみました☕️",
        "道端の草花に癒されました🌼",
        "姿勢を正して過ごすと心も整いますね",
        "最近は音楽を聴きながら日記を書いています🎶",
        "感謝の気持ちを忘れずに過ごしたいです"
    ],
    "しっかり真面目系": [
        "新しいマッサージ技術、勉強中です📘",
        "丁寧な接客を心がけたいと改めて思いました",
        "目標は毎日笑顔でお仕事すること✨",
        "出勤前は必ず身だしなみチェックしてます",
        "ご挨拶は笑顔で丁寧にがモットーです",
        "毎日一つ新しいことを学ぶようにしてます📖",
        "清潔感は第一印象で大切ですね",
        "復習ノート作ってます✍️",
        "一人一人との時間を大切にしたいです",
        "計画立てて行動すると達成感が違いますね",
        "報連相ってやっぱり基本！",
        "言葉遣いの丁寧さは信頼につながると思います",
        "自分の強みを伸ばすことを意識しています",
        "小さなことにも気づける人になりたいです",
        "信頼されるキャストを目指して日々努力中"
    ],
    "ふんわり癒し系": [
        "お花屋さんの前を通ったら素敵な匂いがした🌷",
        "お気に入りの紅茶を飲んでほっと一息☕️",
        "お昼に公園でおにぎり食べました〜🍙",
        "風がやさしくて、ついお昼寝しちゃいそうでした",
        "ひなたぼっこって幸せな時間だよね☀️",
        "小鳥のさえずりに癒されてました🐦",
        "のんびりとした朝が好きです",
        "ふわふわの毛布に包まれる瞬間が幸せ💕",
        "お花の香りのボディクリームにハマってます🌸",
        "雲の流れをぼーっと見てました☁️",
        "あったかいスープがしみる〜🍲",
        "優しい音楽で気持ちがふんわりしました",
        "最近は空を見上げるのが好きです",
        "絵本の世界に癒されてました📚",
        "花言葉って素敵だなって思います💐"
    ],
    "学園系・初心者風": [
        "制服着るとちょっと照れちゃいます…💦",
        "最近ドキドキすることが増えてきましたっ",
        "頑張って成長していきたいですっ！📛",
        "緊張しちゃいました…！",
        "すっごく嬉しかったです！",
        "先生って呼ぶの憧れちゃいますっ",
        "今日の目標は笑顔を絶やさないこと！",
        "写真に落書きしちゃいました💦",
        "真面目にやってました！",
        "みんなと仲良くなれるように頑張るぞっ",
        "給食メニューが懐かしくてうるっときた🥺",
        "ちゃんとノート取ってます！📝",
        "制服がちょっとぶかぶかで可愛いって言われた💕",
        "初めましての挨拶で噛んじゃいました…💦",
        "部活帰りみたいな気分になっちゃった"
    ],
    "お姉さん系": [
        "最近ちょっと疲れてる？癒されに来てほしいな♪",
        "アロマ焚いてリラックスしてたよ〜🌿",
        "誰かの背中をそっと支えるような存在でいたいの💗",
        "たまにはゆっくり甘えていいんだよ",
        "あたしが癒してあげたいなって思ってたの",
        "今日も頑張ったね、よしよし💕",
        "お姉さんに任せて安心してね✨",
        "優しい時間を一緒に過ごしたいな〜",
        "無理してない？ちゃんと休んでね☕️",
        "ゆっくり話聞かせてくれると嬉しいな",
        "あったかい飲み物と一緒にぬくぬくしてたよ",
        "忙しい日こそ丁寧に過ごしたいなと思ってます",
        "疲れたら寄り道してね、あたしのところに🍀",
        "あなたの笑顔が見れると安心するの",
        "会うとホッとするって言ってもらえるのが嬉しいのよね"
    ],
    "かっこいい系": [
        "毎朝ストレッチして気持ち整えてる💪",
        "何事も自分らしく。ブレないスタイルが大事だね",
        "前向いて歩いていこう、そんな日です✨",
        "今日はちょっと気合い入れてメイクした🔥",
        "自分を甘やかしすぎないようにしてるんだ",
        "やるときゃやる、それがモットー",
        "背中で語れるようになりたいな",
        "仕事着を着るとスイッチ入るタイプです🖤",
        "周りに流されない強さを持ってたい",
        "冷静さと情熱、両方大切だと思う🔥",
        "どんな時でも余裕を持ちたいよね",
        "チャレンジしないと前に進めないって思う",
        "目標に向かって一直線って気持ちいい",
        "たまには弱音も吐くけど、それも自分だから",
        "“自分に恥じない”を大事にしてる"
    ],
    "エステ・スパ風": [
        "今朝はハーブティーからスタート🍃",
        "アロマとストレッチで身体を整えました🌿",
        "“整う時間”ってほんとに大切ですよね🛁",
        "瞑想すると気持ちも落ち着きます🕯",
        "最近はオイルマッサージを学んでいます💆‍♀️",
        "スキンケアを丁寧にすると心も潤います",
        "季節の香りを楽しむようにしています🍂",
        "音楽と香りの相乗効果ってすごいですね",
        "お客様の笑顔が一番の癒しです✨",
        "五感でリラックスできる空間作り、意識してます",
        "月のリズムに合わせてケアしてます🌙",
        "美容は日々の積み重ねからですね💄",
        "深呼吸って簡単で奥が深いと思うんです",
        "今日はラベンダーの香りに包まれてました💜",
        "“癒し”は、さりげない優しさだと思います"
    ],
    "ドM系": [
        "最近ちょっと責められたくてうずうずしてます…💋",
        "ご主人様にもっと構ってほしくて…♡",
        "夢の中で手錠されちゃいました…////",
        "叱られるとなんだか嬉しくなっちゃうんです…///",
        "わざといたずらしちゃおうかなって思って…🥺",
        "責められるとドキドキしちゃいます…♡",
        "ご主人様の声が頭から離れなくて…",
        "羞恥プレイに憧れちゃうんです…💕",
        "ご褒美より、お仕置きの方が好きかも…？",
        "きつい言葉にもゾクッとしちゃって…💋",
        "ちゃんと従えるようにがんばるので…🥺",
        "目隠しって、なんか興奮しちゃうんです…///",
        "“いい子だね”って言われたくて…",
        "ドMってバレたくないけど気づいてほしい…💗",
        "今日もいっぱいイジメられたいな…♡"
    ],
    "清楚系": [
        "カフェで静かに読書してました📖",
        "最近ハーブティーにハマってます🌸",
        "丁寧に日記を書く時間が、好きなんです😊",
        "白いブラウスを着ると背筋が伸びます",
        "お散歩中に季節の花を見つけました🌼",
        "ご挨拶は丁寧に、を心がけています",
        "お礼の言葉を忘れないようにしています",
        "ちょっとした気遣いを大切にしたいな",
        "柔らかい雰囲気で過ごせるよう意識しています",
        "お気に入りの本に癒されてました📚",
        "窓から差し込む光に包まれてました☀️",
        "透明感のある装いが好きです",
        "お料理のレパートリー増やしてます🍽️",
        "控えめなアクセサリーにキュンとしてます",
        "静かに微笑むだけで伝わることがあると思ってます"
    ],
    "方言系（関西）": [
        "たこ焼き焼いたらうまくひっくり返せたで〜🐙",
        "テレビ見ながらつい突っ込んでもうた！笑",
        "今日はなんや知らんけどテンション高めやねん✨",
        "関西弁って落ち着くって言われるんや〜",
        "商店街の雰囲気が好きやねん",
        "粉もん食べたら元気出るわ〜",
        "エスカレーターで右に立ってまうんよな笑",
        "ツッコミが日常すぎてクセになってるわ",
        "大阪のおばちゃんみたいに飴ちゃん配りたい🍬",
        "ボケるのもツッコむのも大好きやねん",
        "ノリでなんとかなるって信じてる！",
        "まったり喋るのもええよな〜",
        "自分、不器用ですけど…が口癖かも笑",
        "甘い出汁が落ち着くんよな〜",
        "また来てな〜！って心から思ってるで💕"
    ]
}

def adjust_tone_style(text, tone, name, fav_words=None, other_requests=None):
    # 自己紹介が2重になるのを避ける
    text = re.sub(r"(こんにちは|おはようございます|こんばんは)[^。！？」]*?(です|だよ)[♪！。]?", "", text, 1)

    # ✅ fav_wordsがあれば、お兄ちゃんの呼び方をランダムに差し替え
    if fav_words:
        candidates = [w.strip() for w in fav_words.split("、") if w.strip()]
        if candidates:
            chosen_word = random.choice(candidates)
            text = re.sub(r"おにいちゃん|お兄ちゃん|お兄さま|お兄様", chosen_word, text)

    # ✅ toneによる基本文体変換
    if tone == "甘えんぼ系":
        text = text.replace("です。", "だよぉ〜💗").replace("ます。", "ましゅ〜🐰")
    elif tone == "ロリ系・妹系":
        text = text.replace("です。", "なのっ！").replace("ます。", "ましゅ〜！")
        text = text.replace("だよ。", "だよぉ〜！")
    elif tone == "ギャル系":
        text = text.replace("です。", "だよ〜！").replace("ます。", "まーすっ✨").replace("ありがとう", "あざまるっ！")
    elif tone == "ふんわり癒し系":
        text = text.replace("です。", "ですよ〜☺️").replace("ます。", "ますね🌸")
    elif tone == "大人っぽ系":
        text = text.replace("ですわ。", "です。").replace("ますわね。", "ます。")\
                   .replace("わね。", "ね。").replace("わ。", "。")
    elif tone == "しっかり真面目系":
        text = text.replace("だよ", "です").replace("ね〜", "ですね")
    elif tone == "学園系・初心者風":
        text = text.replace("です。", "ですっ！").replace("ます。", "まーすっ！")
    elif tone == "サバサバ系":
        text = text.replace("です。", "だね〜。").replace("ます。", "するよー。")
    elif tone == "かっこいい系":
        text = text.replace("です。", "だぜ。").replace("ます。", "するぜ！")
    elif tone == "お姉さん系":
        text = text.replace("です。", "よ〜ん。").replace("ます。", "しちゃうわね〜💋")
    elif tone == "エステ・スパ風":
        text = text.replace("です。", "でございます🌿").replace("ます。", "いたしますね🕊")
    elif tone == "丁寧系":
        text = text.replace("だよ", "でございます").replace("ます。", "いたします。")
    elif tone == "ドM系":
        text = text.replace("です。", "ごめんなさい…💦").replace("ます。", "されちゃいます…？")
    elif tone == "清楚系":
        text = text.replace("です。", "です").replace("ます。", "ます")
    elif tone == "方言系（関西）":
        text = text.replace("だよ", "やで").replace("です。", "やん♪").replace("ます。", "しまっせ〜")

    # ✅ other_requests に応じて文体補強（例：妹感・ロリ・えっち・M）
    if other_requests:
        req = other_requests.lower()
        if "妹" in req or "ロリ" in req:
            text = re.sub(r"([だよのね])。", r"\1なの〜💕", text)
            text += "\nぉ兄様のこと、今日もたくさん甘えさせてねっ🥺💗"
        if "m" in req.lower() or "えっち" in req:
            text += "\n…かな、ちょっとムラムラしてきちゃったかも…💦💓"

    # ✅ 最後に名前を付けて自然な締めに
    if name and name not in text:
        text = f"{name}だよ〜🎀\n" + text

    return text

def get_random_topic(tone):
    topics = TONE_TOPICS.get(tone)
    if not topics:
        return ""
    return random.choice(topics)

def get_topic_by_tone(tone):
    return TONE_TOPICS.get(tone, [])

def get_welcome_message(name: str = "写メ日記生成Bot") -> str:
    return (
        f"はじめまして♪ {name}です📝\n\n"
        "このBotは、あなたの「雰囲気」や「キャラ」に合わせて\n"
        "AIが自然で人間らしい写メ日記を自動で作ってくれるサポートツールです💡\n\n"
        "📌 無料プランでも1日3回まで使えるから安心してね♪\n\n"
        "----------------------\n\n"
        "💬 できること\n"
        "・出勤／退勤／お礼などの写メ日記を自動生成✍️\n"
        "・キャラに合わせた文体（妹系・ギャル系・丁寧系など）に変換💫\n"
        "----------------------\n\n"
        "💡まずは『情報を登録する』と送ってね！\n\n"
        "----------------------\n\n"
    )

def get_random_topic(tone):
    """指定された tone に対応する話題からランダムに1つ返す"""
    topics = TONE_TOPICS.get(tone)
    if not topics:
        return ""
    return random.choice(topics)

def get_topic_by_tone(tone):
    return TONE_TOPICS.get(tone, [])
